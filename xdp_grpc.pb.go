// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: xdp.proto

package xdp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XDPClient is the client API for XDP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XDPClient interface {
	GetPacketStream(ctx context.Context, in *GetXDPRequest, opts ...grpc.CallOption) (XDP_GetPacketStreamClient, error)
}

type xDPClient struct {
	cc grpc.ClientConnInterface
}

func NewXDPClient(cc grpc.ClientConnInterface) XDPClient {
	return &xDPClient{cc}
}

func (c *xDPClient) GetPacketStream(ctx context.Context, in *GetXDPRequest, opts ...grpc.CallOption) (XDP_GetPacketStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &XDP_ServiceDesc.Streams[0], "/xdp.XDP/GetPacketStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &xDPGetPacketStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type XDP_GetPacketStreamClient interface {
	Recv() (*GetXDPResponse, error)
	grpc.ClientStream
}

type xDPGetPacketStreamClient struct {
	grpc.ClientStream
}

func (x *xDPGetPacketStreamClient) Recv() (*GetXDPResponse, error) {
	m := new(GetXDPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XDPServer is the server API for XDP service.
// All implementations must embed UnimplementedXDPServer
// for forward compatibility
type XDPServer interface {
	GetPacketStream(*GetXDPRequest, XDP_GetPacketStreamServer) error
	mustEmbedUnimplementedXDPServer()
}

// UnimplementedXDPServer must be embedded to have forward compatible implementations.
type UnimplementedXDPServer struct {
}

func (UnimplementedXDPServer) GetPacketStream(*GetXDPRequest, XDP_GetPacketStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPacketStream not implemented")
}
func (UnimplementedXDPServer) mustEmbedUnimplementedXDPServer() {}

// UnsafeXDPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XDPServer will
// result in compilation errors.
type UnsafeXDPServer interface {
	mustEmbedUnimplementedXDPServer()
}

func RegisterXDPServer(s grpc.ServiceRegistrar, srv XDPServer) {
	s.RegisterService(&XDP_ServiceDesc, srv)
}

func _XDP_GetPacketStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetXDPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XDPServer).GetPacketStream(m, &xDPGetPacketStreamServer{stream})
}

type XDP_GetPacketStreamServer interface {
	Send(*GetXDPResponse) error
	grpc.ServerStream
}

type xDPGetPacketStreamServer struct {
	grpc.ServerStream
}

func (x *xDPGetPacketStreamServer) Send(m *GetXDPResponse) error {
	return x.ServerStream.SendMsg(m)
}

// XDP_ServiceDesc is the grpc.ServiceDesc for XDP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XDP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xdp.XDP",
	HandlerType: (*XDPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPacketStream",
			Handler:       _XDP_GetPacketStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xdp.proto",
}
